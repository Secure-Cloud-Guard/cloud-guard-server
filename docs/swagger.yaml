openapi: 3.0.3
info:
  title: Cloud Guard API
  version: 1.0.0
  description: >-
    The Cloud Guard server that provide API for the client. Made with NodeJS,
    Express and Swagger.
servers:
  - url: http://localhost:3001/api
security:
  - bearerAuth: []
tags:
  - name: S3
    description: Operations related to S3 service
  - name: Cognito
    description: Operations related to Cognito service
paths:
  /s3/bucket/{bucketType}/objects:
    get:
      tags:
        - S3
      summary: Get list of objects for S3 bucket
      description: Retrieves a list of objects for the specified S3 bucket.
      produces:
        - application/json
      parameters:
        - in: path
          name: bucketType
          required: true
          schema:
            type: string
          description: The type of the S3 bucket (storage or personal vault)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/S3ObjectFromList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - S3
      summary: Delete S3 Objects
      description: Deletes multiple objects from the specified S3 bucket.
      parameters:
        - in: path
          name: bucketType
          required: true
          schema:
            type: string
          description: The type of the S3 bucket. (storage or personal vault)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/S3ObjectsDeletionBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3ObjectsDeletionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /s3/bucket/{bucketType}/objects/{objectKey}:
    delete:
      tags:
        - S3
      summary: Delete S3 Object
      description: Deletes an object from the specified S3 bucket.
      parameters:
        - in: path
          name: bucketType
          required: true
          schema:
            type: string
          description: The type of the S3 bucket. (storage or personal vault)
        - in: path
          name: objectKey
          required: true
          schema:
            type: string
          description: The key/name of the object in the S3 bucket.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: Indicates if the object was successfully deleted (true).
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /s3/bucket/{bucketType}/objects/{objectKey}/copy:
    post:
      tags:
        - S3
      summary: Copy S3 Object
      description: Copies an object within the specified S3 bucket to a new object with the provided key.
      parameters:
        - in: path
          name: bucketType
          required: true
          schema:
            type: string
          description: The type of the source S3 bucket. (storage or personal vault)
        - in: path
          name: objectKey
          required: true
          schema:
            type: string
          description: The key/name of the source object in the S3 bucket.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                copiedKey:
                  type: string
                  description: The key/name of the new object to be created by copying.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: Indicates if the object was successfully copied (true).
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /s3/bucket/{bucketType}/objects/{objectKey}/details:
    get:
      tags:
        - S3
      summary: Get S3 object details
      description: Retrieves an object details from the specified S3 bucket.
      parameters:
        - in: path
          name: bucketType
          required: true
          schema:
            type: string
          description: The type of the S3 bucket. (storage or personal vault)
        - in: path
          name: objectKey
          required: true
          schema:
            type: string
          description: The key/name of the object in the S3 bucket.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3ObjectDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /s3/bucket/{bucketType}/objects/{objectKey}/image:
    get:
      tags:
          - S3
      summary: Get image preview from S3 bucket.
      parameters:
        - in: path
          name: bucketType
          required: true
          schema:
            type: string
          description: Type of the bucket.
        - in: path
          name: objectKey
          required: true
          schema:
            type: string
          description: Key of the object in the bucket.
      responses:
        '200':
          description: Image preview.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /cognito/user:
    get:
      tags:
        - Cognito
      summary: Get user information from Cognito
      description: Retrieves information about the current authenticated user from Cognito.
      produces:
        - application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CognitoUserDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    S3ObjectsDeletionBody:
      type: object
      properties:
        objectKeys:
          type: array
          items:
            type: string
          description: List of object keys to be deleted from the S3 bucket.
    S3ObjectsDeletionResponse:
      type: object
      properties:
        Deleted:
          type: array
          items:
            type: object
            properties:
              Key:
                type: string
                description: The key/name of the deleted object.
    S3ObjectFromList:
      type: object
      properties:
        name:
          type: string
          description: The name of the object
        size:
          type: integer
          description: The size of the object in bytes
        lastModified:
          type: string
          format: date-time
          description: The last modified timestamp of the object
        isFolder:
          type: boolean
          description: Indicates if the object is a folder
        children:
          type: array
          items:
            $ref: '#/components/schemas/S3ObjectFromList'
          description: List of child objects (if the object is a folder)
    S3ObjectDetails:
      type: object
      properties:
        AcceptRanges:
          type: string
          description: Accept ranges of the object.
        LastModified:
          type: string
          format: date-time
          description: The last modified timestamp of the object.
        ContentLength:
          type: integer
          description: The content length of the object.
        ContentType:
          type: string
          description: The content type of the object.
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: The error message
        stack:
          type: string
          description: The error stack
    CognitoUserDetails:
      type: object
      properties:
        UserAttributes:
          type: array
          items:
            type: object
            properties:
              Name:
                type: string
                description: The name of the attribute
              Value:
                type: string
                description: The value of the attribute
        Username:
          type: string
          description: The username